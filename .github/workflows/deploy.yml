name: Nextcloud Blue/Green Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  HELM_VERSION: "v3.14.0"
  KUBECTL_VERSION: "v1.29.2"

jobs:
  lint-and-test:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh --version ${{ env.HELM_VERSION }}

      - name: Lint Helm chart
        run: helm lint . --strict

  deploy-to-test:
    needs: lint-and-test
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Kubernetes tools
        run: |
          curl -LO "https://dl.k8s.io/release/${{ env.KUBECTL_VERSION }}/bin/linux/amd64/kubectl"
          chmod +x kubectl && mv kubectl /usr/local/bin/
          helm plugin install https://github.com/jkroepke/helm-secrets

      - name: Configure Kubecontext
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          kubectl config use-context ${{ secrets.KUBE_CONTEXT }}

      - name: Deploy test environment
        run: |
          helm secrets upgrade --install ${{ secrets.APP_NAME }}-test . \
            --namespace ${{ secrets.APP_NAME }}-test \
            --create-namespace \
            --set global.deployment.active=test \
            --values sealed-secrets.yaml

      - name: Run smoke tests
        run: |
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=nextcloud \
            -n ${{ secrets.APP_NAME }}-test --timeout=300s
          # Add your custom test commands here

  blue-green-deployment:
    needs: deploy-to-test
    if: github.ref == 'refs/heads/main'
    runs-on: self-hosted
    strategy:
      matrix:
        color: [blue, green]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Kubernetes tools
        run: |
          curl -LO "https://dl.k8s.io/release/${{ env.KUBECTL_VERSION }}/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          helm plugin install https://github.com/jkroepke/helm-secrets

      - name: Configure Kubecontext
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          kubectl config use-context ${{ secrets.KUBE_CONTEXT }}

      - name: Deploy ${{ matrix.color }} environment
        run: |
          helm secrets upgrade --install ${{ secrets.APP_NAME }}-${{ matrix.color }} . \
            --namespace ${{ secrets.APP_NAME }}-${{ matrix.color }} \
            --create-namespace \
            --set global.deployment.active=${{ matrix.color }} \
            --values sealed-secrets.yaml

      - name: Validate ${{ matrix.color }} deployment
        run: |
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=nextcloud \
            -n ${{ secrets.APP_NAME }}-${{ matrix.color }} --timeout=300s

  switch-traffic:
    needs: blue-green-deployment
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Kubecontext
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          kubectl config use-context ${{ secrets.KUBE_CONTEXT }}

      - name: Determine current color
        id: current-color
        run: |
          CURRENT=$(kubectl get ingress -n production nextcloud-ingress \
            -o jsonpath='{.metadata.annotations.deployment\.color}' || echo "blue")
          echo "current_color=$CURRENT" >> $GITHUB_OUTPUT

      - name: Switch traffic
        run: |
          NEW_COLOR=${{ steps.current-color.outputs.current_color == 'blue' && 'green' || 'blue' }}
          
          # Update ingress annotation
          kubectl annotate ingress -n production nextcloud-ingress \
            deployment.color=$NEW_COLOR --overwrite

          # Promote deployment
          helm upgrade ${{ secrets.APP_NAME }} . \
            --namespace production \
            --set global.deployment.active=$NEW_COLOR \
            --reuse-values

          # Cleanup old deployment
          OLD_COLOR=${{ steps.current-color.outputs.current_color }}
          kubectl delete namespace ${{ secrets.APP_NAME }}-$OLD_COLOR || true
